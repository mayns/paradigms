declare
% {Producer N}: this agent produces a stream of consecutive integers beginning with 1 and ending with N (the stream is closed when N is inserted).
% {Consumer S}: this agent receives a stream of integers S and returns the sum of these elements.
% {Filter S}: this agent receives a stream of integers S and returns a stream based on S containing only odd numbers.

fun {Producer N}
   local Prod in
      fun {Prod C}
	 if C == N then C|nil
	 else
	    C|{Prod C+1}
	 end
      end
      {Prod 1}
   end
end

fun {Consumer S}
   local Sum Cons in
      Sum = {NewCell 0}
      fun {Cons M}
	 case M of X|S2 then
	    Sum:=@Sum + X
	    {Cons S2}
	 [] nil then
	    @Sum
	 end
      end
      {Cons S}
   end
end

fun {Filter S}
   case S of X|S2 then
      if (X mod 2 \= 0) then X|{Filter S2}
      else {Filter S2}
      end
   [] nil then
      nil
   end
end

local S1 S2 in
   thread S1 = {Producer 20} end
   thread S2 = {Filter S1} end
   thread {Browse {Consumer S2}} end
end

