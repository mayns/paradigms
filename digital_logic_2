declare

fun {GateMaker F}
   fun {$ Xs Ys}
      fun {GateLoop Xs Ys}
	 case Xs#Ys of (X|Xr)#(Y|Yr) then
	    {F X Y}|{GateLoop Xr Yr}
	 [] (nil#nil) then nil
	 [] (M#N) then {F M N}
	 end
      end
   in
      thread {GateLoop Xs Ys} end
   end
end

AndG = {GateMaker fun {$ X Y} X*Y end}
OrG = {GateMaker fun {$ X Y} X+Y-X*Y end}
XorG = {GateMaker fun {$ X Y} X+Y-2*X*Y end}

proc {FullAdder X Y Z C S}
   A B D E F
in
   A={AndG X Y}
   B={AndG Y Z}
   D={AndG X Z}
   F={OrG B D}
   C={OrG A F}
   E={XorG X Y}
   S={XorG Z E}
end

fun {ListAdder L1 L2}
   case L1#L2 of nil#nil then nil#0
   [] (H1|T1)#(H2|T2) then
      case {ListAdder T1 T2} of Lst#Cin then
         local Cout S in
            {FullAdder H1 H2 Cin Cout S}
            (S|Lst)#Cout
         end
      end
   end
end

fun {NFullAdder S1 S2}
   case S1#S2 of (H1|T1)#(H2|T2) then
      {ListAdder H1 H2}|{NFullAdder T1 T2}
   else nil
   end
end

local S1 S2 in
   S1=[1 1 1 1 1]|[0 0 0 0 0]|[1 1 1 1 0]|_
   S2=[1 1 1 1 1]|[0 0 0 0 0]|[0 0 0 0 1]|_
   {Browse thread {NFullAdder S1 S2} end}
end