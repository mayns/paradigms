declare

fun {GateMaker F}
   fun {$ Xs Ys}
      fun {GateLoop Xs Ys}
	 case Xs#Ys of (X|Xr)#(Y|Yr) then
	    {F X Y}|{GateLoop Xr Yr}
	 end
      end
   in
      thread {GateLoop Xs Ys} end
   end
end

AndG = {GateMaker fun {$ X Y} X*Y end}
OrG = {GateMaker fun {$ X Y} X+Y-X*Y end}
XorG = {GateMaker fun {$ X Y} X+Y-2*X*Y end}

proc {FullAdder X Y Z C S}
   A B D E F
in
   A = {AndG X Y}
   B = {AndG Y Z}
   D = {AndG X Z}
   F = {OrG B D}
   C = {OrG A F}
   E = {XorG X Y}
   S = {XorG Z E}
end

fun {ListAdder L1 L2 Car Sol}
   C S in
   if L1==nil then Sol#Car
   else
      case L1#L2 of (H1|T1)#(H2|T2) then
         {FullAdder H1 H2 Car C S}
         {ListAdder T1 T2 C S|Sol}
      end
   end
end
 
fun {NFullAdder S1 S2}
   case S1#S2 of (H1|T1)#(H2|T2) then
      thread {ListAdder {Reverse H1} {Reverse H2} 0 nil}|{NFullAdder T1 T2} end
   end
end

declare S1 S2 in
S1 = [1 1 1 1 1]|[0 0 0 0 0]|[1 1 1 1 0]|_ 
S2 = [1 1 1 1 1]|[0 0 0 0 0]|[0 0 0 0 1]|_ 
{Browse {NFullAdder S1 S2}}